# -*- coding: utf-8 -*-
"""python.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eU2BdPfy0fiPfR0Hcj6XJhV95ZxafnL7
"""

#variables
a=10
b=20
c=a+b
print(c)

#casting
a=int("10")
b=int("20")
c=a+b
print(c)

#how to get user input
a=int(input())
b=int(input())
c=a+b
print(c)

#question1
name=input()
age=input()
print("My Name is:",name)
print("My Age is:",age)

#question2
name=input()
age=input()
address=input()
print("My Name is:",name)
print("My Age is:",age)
print("My Address is:",address)

#ques3
a=int(input())
b=int(input())
c=int(input())
d=a*b*c
e=a+b+c
f=d/e
print(f)

#ques4
name=input()
score=int(input())
department=input()
print("My Name is",name)
print("My Score is",score/10,"/10")
print("My Department is",department)

#if else with boolean values
meghna=input()
if(meghna == "died"):
  print("surya meets priya")
else:
  print("surya weds meghna")

#if else example1
mark=int(input())
if(mark>35):
  print("pass")
else:
  print("fail")

#ex2
income=int(input())
if(income>7000):
  print("scholarship is available")
else:
  print("no scholarship")

#ex3
num=int(input())
if(num%3==0 and num%5==0):
  print("num is divis by 3 and 5")
else:
  print("num is not divis by 3 and 5")

#ex4
num=int(input())
if (num%2==0):
  print("even")
else:
  print("odd")

#ex5
score=int(input("score:"))
if (score<35):
  print("poor student")
elif (score>35 and score<70):
  print("average student")
elif (score>70):
  print("good student")
else:
  print("invalid score")

#ex6
a=int(input())
b=int(input())
operation=input("add/sub/mul/div")
if (operation == "add"):
  print(a+b)
elif (operation == "sub"):
  print(a-b)
elif (operation == "mul"):
  print(a*b)
elif (operation == "div"):
  print(a/b)
else:
  print("invalid operation")

#ex7
score=int(input("score percentage:"))
if(score>=70):
  name=input("enter your name:")
  age=input("enter your age")
  print("you are eligible")
else:
  print("you are not eligible")

#ex8
salary=int(input("salary:"))
age=int(input("age:"))
if (salary>=20000 , age<=25):
  loan=int(input("loan:"))
  if(loan>50000):
    print("max loan amt is 50000")
  else:
    print("you are eligible for loan")
else:
  print("you are not eligible for loan")

#ex9
a=int(input("english="))
b=int(input("maths="))
c=int(input("tamil="))
d=int(input("science="))
e=int(input("social="))
total=a+b+c+d+e
average=total/5
if(average<35):
  print("additional class is required")
else:
  print("you are good to go")

#for loop
#example1(print 2table)
for i in range(1,11):
  print(i,"x2=",2*i)

#ex2
a=int(input())
b=int(input())
for i in range(a+1,b):
  print(i)

#ex3
for i in range(1,11):
  if(i%2==0):
    print(i)

#ex4
count=0
for i in range (1,11):
  if(i%2==0):
    count=count+1
print(count)

#ex5
e_count=0
o_count=0
for i in range(1,11):
  if(i%2==0):
    e_count=e_count+1
  else:
    o_count=o_count+1
print("even count=",e_count)
print("odd count=",o_count)

#ex6
count=0
for i in range(1,101):
  if(i%3==0 and i%5==0):
    count=count+1
print(count)

#ex7
sum=0
for i in range(1,6):
  sum=sum+i
  print(sum)

#ex8
a=[]
print("enter 5 numbers:")
for i in range(5):
 num=int(input("enter num"+str(i+1)))
a.append(num)
print(a)
sum=0
for i in a:
  sum=sum+i
print(sum)

#ex10
i=0
for i in range(1,6):
  cube=i*i*i
  print(f"the cube of{i} is:",cube)

#ex9
a=[]
print("enter 7 numbers")
for i in range(7):
  num=int(input("enter num"+str(i+1)))
  a.append(num)
print("the first 7 natural number is:",a)

#nested loop sample prg
for i in range(1,6):
  for j in range(1,3):
    print(j,"apple")

#ex1
for i in range(1,3):
  print("week:",i)
  for j in range(1,4):
    print("day:",j)

#ex2
a="*"
for i in range(5):
    print(a*i)

#ex3
i=1
while(i<6):
  print(i)
  i=i+1

#ex4
i=10
while(i<=200):
  print(i,end=",")
  i=i+10

#ex5
i=10
while(i>0):
  print(i,end=",")
  i=i-1

#ex6
i=3
fact=1
while(i>0):
  fact=fact*i
  i=i-1
print(fact)

#functions in pythonex1

def add():
  a=int(input())
  b=int(input())
  c=a+b
  print(c)
add()

#ex2
def findevenorodd(num):
  if(num%2==0):
    print("even")
  else:
    print("odd")
num=int(input("enter a num:"))
findevenorodd(num)

#ex3
def findpassorfail(mark):
  if(mark>=35):
    print("pass")
  else:
    print("fail")
mark=int(input())
findpassorfail(mark)

#ex4
def printrange(r1,r2):
  for i in range(r1,r2):
    print(i)
a=int(input("enter a:"))
b=int(input("enter b:"))
printrange(a,b)

#return keyword in python
def valueofa():
  return 10
a=valueofa()
print(a)

#ex1
s_username="rosy"
s_password="123"

uname=input("enter username:")
password=input("enter password:")

def validate():
  if(s_username==uname and s_password==password):
    return("true")
  else:
    return("false")
a=validate()
print(a)

#ex2
def add(n1,n2):
  return n1+n2
a=int(input("enter a:"))
b=int(input("enter b:"))
c=int(input("enter c:"))
added=add(a,b)
output=added*c
print(output)

#classes and objects
class goa:
  name=""
  drink=""
  def party(self):
    print("lets party")
  def beach(self):
    print("enjoying the beach")
ramesh=goa()
suresh=goa()

ramesh.name="Ramesh"
suresh.name="Suresh"

ramesh.drink="yes"
suresh.drink="no"

print(ramesh.name)
print("drink:",ramesh.drink)
print(suresh.name)
print("drink:",suresh.drink)
ramesh.party()
suresh.beach()

#ex1
class laptop:
  price=""
  processor=""
  ram=""
hp=laptop()
dell=laptop()
lenovo=laptop()

hp.price=30000
hp.processor="i5"
hp.ram=8

dell.price=40000
dell.processor="i7"
dell.ram=16

lenovo.price=50000
lenovo.processor="i6"
lenovo.ram=32

print(hp.price)
print(dell.price)

#constructor and keyword
class laptop:
  def __init__(self):
    self.ram=""
    self.processor=""
  def display(self):
    print("ram:",self.ram)
    print("processor:",self.processor)
hp=laptop()
dell=laptop()
hp.ram="8gb"
hp.processor="i5"
dell.ram="16gb"
dell.processor="i7"
hp.display()

#ex1(class and obj)
class student:
  def __init__(self):
    self.name=""
    self.regno=""
  def display(self):
    print("name:",self.name)
    print("regno:",self.regno)
s1=student()
s1.name="valarmathi"
s1.regno="49"
s1.display()

#ex2
class fruit:
  def __init__(self,col):
    self.color=col
apple=fruit("red")
print(apple.color)

#ex3
class teacher:
  def __init__(self,nam,reg):
    self.name=nam
    self.regno=reg
  def display(self):
    print("name:",self.name)
    print("regno:",self.regno)
t1=teacher("rossy","1")
t2=teacher("ram","2")
t1.display()
t2.display()

#ex4
class calculator:
  def add(self,a,b):
    print("add",a+b)
  def sub(self,a,b):
    print("sub",a-b)
  def mul(self,a,b):
    print("mul",a*b)
  def div(self,a,b):
    print("div",a/b)
obj1=calculator()
obj1.add(10,20)
obj1.sub(20,10)
obj1.mul(10,20)
obj1.div(20,10)

#types of class variable..1)instance variable(changing) and class variable(common for all).

class phone():
  chargertype="c type"#class variable
  def __init__(self,brand,price):
    self.price=price#instance variable
    self.brand=brand#instance variable
  def display(self):
    print("brand:",self.brand)
    print("price:",self.price)
    print("chargertype:",self.chargertype)
samsung=phone("samsung",20000)
samsung.display()
redmi=phone("redmi",10000)
redmi.display()

from types import MethodDescriptorType
#types of class methods(instance,class,and static method)
class laptop():
  chargertype="c type"
  def __init__(self,brand,price):
    self.price=34
    self.brand=""
  def setprice(self,price):
    self.price=price
  def getprice(self):
    print(self.price)
  @classmethod
  def changechargertype(cls):
    cls.chargertype="btype"
    print("charger type changed to b")
  @staticmethod
  def info():
    print("this is laptop class")
hp=laptop("hp", 20000)
hp.setprice(20000)
hp.getprice()
laptop.changechargertype()
laptop.info()

#inheritance and its type(single and multiple inheritance)
class dad():
  def phone(self):
    print("dads phone")
class mom():
  def sweet(self):
    print("moms sweet")
class daughter(dad,mom):
  def laptop(self):
    print("laptop")
rosy=daughter()
rosy.laptop()
rosy.sweet()
rosy.phone()

#multilevel inheritance
class grandpa():
  def phone(self):
    print("grandpas phone")
class dad(grandpa):
  def money(self):
    print("dads money")
class daughter(dad):
  def laptop(self):
    print("daughters laptop")
rosy=daughter()
rosy.phone()

#hierarchy inheritance(one base cls is inherited by other classes)
class dad():
  def money(self):
    print("dads money")
class son1(dad):
  pass#empty
class son2(dad):
  pass
class son3(dad):
  pass
s3=son3()
s3.money()

#hybrid inheritance(mixed of all inheritance)
class dad():
  def money(self):
    print("dads money")
class land():
  def important(self):
    print("important land")
class son1(dad,land):
  pass#empty
class son2(dad):
  pass
class son3(dad):
  pass
s1=son1()
s1.important()

#super keyword in python
class a():
  def __init__(self):
    print("a")
  def display(self):
    print("class a")
class b():
  def __init_(self):
    super().__init__()
    print("b")
  def display(self):
    print("class b")
class c(a,b):
  def __init__(self):
    super().__init__()
    print("c")
  def display(self):
    print("class c")
obj=c()

#polymorphism
def add(a,b,c=0):
  print(a+b+c)
add(10,20)
add(10,20,30)

#ex1
class animal():
  def sound(self):
    print("animal sounds")
class dog(animal):
  def sound(self):
    print("dog barks")
class bird(animal):
  def sound(self):
    print("bird chirps")
b=bird()
b.sound()

#inheritance and polymorphism ex1
class shape():
  def area(self):
    return 0
class rectangle(shape):
  def area(self):
    l=10
    b=20
    print(l*b)
r1=rectangle()
r1.area()

#ex2
class person():
  def __init__(self,name):
    self.name=name
class student(person):
  def __init__(self,name,grade):
    super().__init__(name)
    self.grade=grade
  def display(self):
    print(self.name,self.grade)
s1=student("rosy",10)
s1.display()

#ex3
class vehicle():
  def start(self):
    print("vehicle started")
class car(vehicle):
  def start(self):
    print("car started")
c1=car()

#ex4
class employee():
  def __init__(self,name,salary):
    self.name=name
    self.salary=salary
class manager(employee):
  def __init__(self,name,salary,department):
    super().__init__(name,salary)
    self.department=department
  def display(self):
    print(self.name,self.salary,self.department)
m1=manager("rosy","20,0000","ece")
m1.display()

#encapsulation(public,private,protector)
#public
class company():
  def __init__(self):
    self.companyname="google"
c1=company()
c1.companyname="microsoft"
print(c1.companyname)

#private
class company():
  def __init__(self):
    self.__companyname="google"
  def companyname(self):
    print(self.__companyname)
c1=company()
c1.companyname()

#protector
class company():
  def __init__(self):
    self._companyname="google"
class b(company):
  pass
b1=b()
print(b1._companyname)

